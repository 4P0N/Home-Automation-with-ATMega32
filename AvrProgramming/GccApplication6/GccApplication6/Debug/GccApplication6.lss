
GccApplication6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000080  00800060  000001ca  0000025e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000e0  008000e0  000002de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007a3  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000625  00000000  00000000  00000b1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000317  00000000  00000000  00001144  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  0000145c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000349  00000000  00000000  000014e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000239  00000000  00000000  00001829  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001a62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ec       	ldi	r30, 0xCA	; 202
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3e       	cpi	r26, 0xE0	; 224
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 ee       	ldi	r26, 0xE0	; 224
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3e       	cpi	r26, 0xE2	; 226
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 9d 00 	call	0x13a	; 0x13a <main>
  8a:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <printLed>:
	{1,0,0,1,1,0,0,1},
	{1,0,1,0,0,1,0,1},
	{1,1,0,0,0,0,1,1},
	{1,0,0,0,0,0,0,1}
};
void printLed(unsigned char a[8][8]){
  92:	ef 92       	push	r14
  94:	ff 92       	push	r15
  96:	0f 93       	push	r16
  98:	1f 93       	push	r17
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	8c 01       	movw	r16, r24
	for (int i=0; i<8; i++){
  a0:	c0 e0       	ldi	r28, 0x00	; 0
  a2:	d0 e0       	ldi	r29, 0x00	; 0
		unsigned char x = 0;
		unsigned char y = 0;
		x = (1 << i);
  a4:	a1 e0       	ldi	r26, 0x01	; 1
  a6:	b0 e0       	ldi	r27, 0x00	; 0
  a8:	7d 01       	movw	r14, r26
  aa:	0c 2e       	mov	r0, r28
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <printLed+0x20>
  ae:	ee 0c       	add	r14, r14
  b0:	ff 1c       	adc	r15, r15
  b2:	0a 94       	dec	r0
  b4:	e2 f7       	brpl	.-8      	; 0xae <printLed+0x1c>
  b6:	f8 01       	movw	r30, r16
		for(int j=0; j<8; j++){
  b8:	20 e0       	ldi	r18, 0x00	; 0
  ba:	30 e0       	ldi	r19, 0x00	; 0
	{1,0,0,0,0,0,0,1}
};
void printLed(unsigned char a[8][8]){
	for (int i=0; i<8; i++){
		unsigned char x = 0;
		unsigned char y = 0;
  bc:	40 e0       	ldi	r20, 0x00	; 0
		x = (1 << i);
		for(int j=0; j<8; j++){
			if(a[i][j]){
  be:	91 91       	ld	r25, Z+
  c0:	99 23       	and	r25, r25
  c2:	41 f0       	breq	.+16     	; 0xd4 <printLed+0x42>
				y |= (1 << j);
  c4:	bd 01       	movw	r22, r26
  c6:	02 2e       	mov	r0, r18
  c8:	02 c0       	rjmp	.+4      	; 0xce <printLed+0x3c>
  ca:	66 0f       	add	r22, r22
  cc:	77 1f       	adc	r23, r23
  ce:	0a 94       	dec	r0
  d0:	e2 f7       	brpl	.-8      	; 0xca <printLed+0x38>
  d2:	46 2b       	or	r20, r22
void printLed(unsigned char a[8][8]){
	for (int i=0; i<8; i++){
		unsigned char x = 0;
		unsigned char y = 0;
		x = (1 << i);
		for(int j=0; j<8; j++){
  d4:	2f 5f       	subi	r18, 0xFF	; 255
  d6:	3f 4f       	sbci	r19, 0xFF	; 255
  d8:	28 30       	cpi	r18, 0x08	; 8
  da:	31 05       	cpc	r19, r1
  dc:	81 f7       	brne	.-32     	; 0xbe <printLed+0x2c>
			if(a[i][j]){
				y |= (1 << j);
			}
		}
		PORTB = x;
  de:	e8 ba       	out	0x18, r14	; 24
		PORTA = ~y;
  e0:	40 95       	com	r20
  e2:	4b bb       	out	0x1b, r20	; 27
	{1,0,1,0,0,1,0,1},
	{1,1,0,0,0,0,1,1},
	{1,0,0,0,0,0,0,1}
};
void printLed(unsigned char a[8][8]){
	for (int i=0; i<8; i++){
  e4:	21 96       	adiw	r28, 0x01	; 1
  e6:	08 5f       	subi	r16, 0xF8	; 248
  e8:	1f 4f       	sbci	r17, 0xFF	; 255
  ea:	c8 30       	cpi	r28, 0x08	; 8
  ec:	d1 05       	cpc	r29, r1
  ee:	e1 f6       	brne	.-72     	; 0xa8 <printLed+0x16>
			}
		}
		PORTB = x;
		PORTA = ~y;
	}
	} ISR(INT0_vect){
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	1f 91       	pop	r17
  f6:	0f 91       	pop	r16
  f8:	ff 90       	pop	r15
  fa:	ef 90       	pop	r14
  fc:	08 95       	ret

000000fe <__vector_1>:
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	2f 93       	push	r18
 10a:	3f 93       	push	r19
 10c:	8f 93       	push	r24
 10e:	9f 93       	push	r25
		state = 1 - state;
 110:	20 91 e0 00 	lds	r18, 0x00E0	; 0x8000e0 <__data_end>
 114:	30 91 e1 00 	lds	r19, 0x00E1	; 0x8000e1 <__data_end+0x1>
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	82 1b       	sub	r24, r18
 11e:	93 0b       	sbc	r25, r19
 120:	90 93 e1 00 	sts	0x00E1, r25	; 0x8000e1 <__data_end+0x1>
 124:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__data_end>
	}
 128:	9f 91       	pop	r25
 12a:	8f 91       	pop	r24
 12c:	3f 91       	pop	r19
 12e:	2f 91       	pop	r18
 130:	0f 90       	pop	r0
 132:	0f be       	out	0x3f, r0	; 63
 134:	0f 90       	pop	r0
 136:	1f 90       	pop	r1
 138:	18 95       	reti

0000013a <main>:
	int main(void)
	{
		DDRB = 0xFF;
 13a:	8f ef       	ldi	r24, 0xFF	; 255
 13c:	87 bb       	out	0x17, r24	; 23
		DDRA = 0xFF;
 13e:	8a bb       	out	0x1a, r24	; 26
		GICR = (1 << INT0); //int0 interrupt enable
 140:	80 e4       	ldi	r24, 0x40	; 64
 142:	8b bf       	out	0x3b, r24	; 59
		MCUCR = MCUCR | 0b00000011; //rising edge e trigger
 144:	85 b7       	in	r24, 0x35	; 53
 146:	83 60       	ori	r24, 0x03	; 3
 148:	85 bf       	out	0x35, r24	; 53
		sei();
 14a:	78 94       	sei
			}
			else if(state == 0){
				//for(int i=0; i<8; i++)
				//for(int j=0; j<8; j++) pattern1[i][j] = pattern[i][j];
				for (int i=0; i<255; i++)printLed(pattern);
				PORTB = 0xFF; //led off
 14c:	ff 24       	eor	r15, r15
 14e:	fa 94       	dec	r15
 150:	08 e6       	ldi	r16, 0x68	; 104
 152:	10 e0       	ldi	r17, 0x00	; 0
		sei();
		//int on = 1;
		while (1)
		{
			//on = 1 - on;
			if (state == 1) {
 154:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__data_end>
 158:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <__data_end+0x1>
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	d1 f4       	brne	.+52     	; 0x194 <main+0x5a>
 160:	c0 e6       	ldi	r28, 0x60	; 96
 162:	d0 e0       	ldi	r29, 0x00	; 0
 164:	a8 e9       	ldi	r26, 0x98	; 152
 166:	b0 e0       	ldi	r27, 0x00	; 0
				int temp;
				//ekbar row shift kre print kortesi
				for (int j = 0; j < 8; j++) { //row
					temp = pattern1[0][j];
 168:	98 81       	ld	r25, Y
 16a:	fe 01       	movw	r30, r28
					for (int i = 0; i < 7; i++ ) { //col
						pattern1[i][j] = pattern1[i+1][j];
 16c:	80 85       	ldd	r24, Z+8	; 0x08
 16e:	80 83       	st	Z, r24
 170:	38 96       	adiw	r30, 0x08	; 8
			if (state == 1) {
				int temp;
				//ekbar row shift kre print kortesi
				for (int j = 0; j < 8; j++) { //row
					temp = pattern1[0][j];
					for (int i = 0; i < 7; i++ ) { //col
 172:	ea 17       	cp	r30, r26
 174:	fb 07       	cpc	r31, r27
 176:	d1 f7       	brne	.-12     	; 0x16c <main+0x32>
						pattern1[i][j] = pattern1[i+1][j];
					} pattern1[7][j] =
 178:	9d 93       	st	X+, r25
 17a:	21 96       	adiw	r28, 0x01	; 1
		{
			//on = 1 - on;
			if (state == 1) {
				int temp;
				//ekbar row shift kre print kortesi
				for (int j = 0; j < 8; j++) { //row
 17c:	0c 17       	cp	r16, r28
 17e:	1d 07       	cpc	r17, r29
 180:	99 f7       	brne	.-26     	; 0x168 <main+0x2e>
 182:	cf ef       	ldi	r28, 0xFF	; 255
 184:	d0 e0       	ldi	r29, 0x00	; 0
					for (int i = 0; i < 7; i++ ) { //col
						pattern1[i][j] = pattern1[i+1][j];
					} pattern1[7][j] =
					temp;
				} for (
				int i=0; i<255; i++)printLed(pattern1);
 186:	80 e6       	ldi	r24, 0x60	; 96
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 49 00 	call	0x92	; 0x92 <printLed>
 18e:	21 97       	sbiw	r28, 0x01	; 1
					temp = pattern1[0][j];
					for (int i = 0; i < 7; i++ ) { //col
						pattern1[i][j] = pattern1[i+1][j];
					} pattern1[7][j] =
					temp;
				} for (
 190:	d1 f7       	brne	.-12     	; 0x186 <main+0x4c>
 192:	e0 cf       	rjmp	.-64     	; 0x154 <main+0x1a>
				int i=0; i<255; i++)printLed(pattern1);
				//_delay_ms(500);
			}
			else if(state == 0){
 194:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__data_end>
 198:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <__data_end+0x1>
 19c:	89 2b       	or	r24, r25
 19e:	d1 f6       	brne	.-76     	; 0x154 <main+0x1a>
 1a0:	cf ef       	ldi	r28, 0xFF	; 255
 1a2:	d0 e0       	ldi	r29, 0x00	; 0
				//for(int i=0; i<8; i++)
				//for(int j=0; j<8; j++) pattern1[i][j] = pattern[i][j];
				for (int i=0; i<255; i++)printLed(pattern);
 1a4:	80 ea       	ldi	r24, 0xA0	; 160
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 49 00 	call	0x92	; 0x92 <printLed>
 1ac:	21 97       	sbiw	r28, 0x01	; 1
 1ae:	d1 f7       	brne	.-12     	; 0x1a4 <main+0x6a>
				PORTB = 0xFF; //led off
 1b0:	f8 ba       	out	0x18, r15	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b2:	2f e9       	ldi	r18, 0x9F	; 159
 1b4:	86 e8       	ldi	r24, 0x86	; 134
 1b6:	91 e0       	ldi	r25, 0x01	; 1
 1b8:	21 50       	subi	r18, 0x01	; 1
 1ba:	80 40       	sbci	r24, 0x00	; 0
 1bc:	90 40       	sbci	r25, 0x00	; 0
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <main+0x7e>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <main+0x88>
 1c2:	00 00       	nop
 1c4:	c7 cf       	rjmp	.-114    	; 0x154 <main+0x1a>

000001c6 <_exit>:
 1c6:	f8 94       	cli

000001c8 <__stop_program>:
 1c8:	ff cf       	rjmp	.-2      	; 0x1c8 <__stop_program>
