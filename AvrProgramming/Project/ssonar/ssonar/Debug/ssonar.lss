
ssonar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000390  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000404  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000434  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006d2  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005eb  00000000  00000000  00000b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002eb  00000000  00000000  00001155  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00001440  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000387  00000000  00000000  00001488  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cc  00000000  00000000  0000180f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000018db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  74:	0c 94 c6 01 	jmp	0x38c	; 0x38c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_9>:
#define  Trigger_pin	PB4	/* Trigger pin */

int TimerOverflow = 0;

ISR(TIMER1_OVF_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
	TimerOverflow++;	/* Increment Timer Overflow count */
  8a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  8e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  92:	01 96       	adiw	r24, 0x01	; 1
  94:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
  98:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
}
  9c:	9f 91       	pop	r25
  9e:	8f 91       	pop	r24
  a0:	0f 90       	pop	r0
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	0f 90       	pop	r0
  a6:	1f 90       	pop	r1
  a8:	18 95       	reti

000000aa <main>:
int main(void)
{
	long count;
	double distance;
	
	DDRB = 0xFF;		/* Make trigger pin as output */
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b00010000;		/* Turn on Pull-up */
  ae:	80 e1       	ldi	r24, 0x10	; 16
  b0:	88 bb       	out	0x18, r24	; 24
	DDRD = 0x00;
  b2:	11 ba       	out	0x11, r1	; 17
	
	sei();			/* Enable global interrupt */
  b4:	78 94       	sei
	TIMSK = (1 << TOIE1);	/* Enable Timer1 overflow interrupts */
  b6:	84 e0       	ldi	r24, 0x04	; 4
  b8:	89 bf       	out	0x39, r24	; 57
	TCCR1A = 0;		/* Set all bit to zero Normal operation */
  ba:	1f bc       	out	0x2f, r1	; 47
		PORTB |= (1 << Trigger_pin);
		_delay_us(10);
		PORTB &= (~(1 << Trigger_pin));
		
		TCNT1 = 0;	/* Clear Timer counter */
		TCCR1B = 0x41;	/* Capture on rising edge, No prescaler*/
  bc:	01 e4       	ldi	r16, 0x41	; 65
		TIFR = 1<<ICF1;	/* Clear ICP flag (Input Capture flag) */
  be:	d0 e2       	ldi	r29, 0x20	; 32
		TIFR = 1<<TOV1;	/* Clear Timer Overflow flag */
  c0:	c4 e0       	ldi	r28, 0x04	; 4

		/*Calculate width of Echo by Input Capture (ICP) */
		
		while ((TIFR & (1 << ICF1)) == 0);/* Wait for rising edge */
		TCNT1 = 0;	/* Clear Timer counter */
		TCCR1B = 0x01;	/* Capture on falling edge, No prescaler */
  c2:	11 e0       	ldi	r17, 0x01	; 1
	TCCR1A = 0;		/* Set all bit to zero Normal operation */

	while(1)
	{
		/* Give 10us trigger pulse on trig. pin to HC-SR04 */
		PORTB |= (1 << Trigger_pin);
  c4:	c4 9a       	sbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	2a e1       	ldi	r18, 0x1A	; 26
  c8:	2a 95       	dec	r18
  ca:	f1 f7       	brne	.-4      	; 0xc8 <main+0x1e>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x24>
		_delay_us(10);
		PORTB &= (~(1 << Trigger_pin));
  ce:	c4 98       	cbi	0x18, 4	; 24
		
		TCNT1 = 0;	/* Clear Timer counter */
  d0:	1d bc       	out	0x2d, r1	; 45
  d2:	1c bc       	out	0x2c, r1	; 44
		TCCR1B = 0x41;	/* Capture on rising edge, No prescaler*/
  d4:	0e bd       	out	0x2e, r16	; 46
		TIFR = 1<<ICF1;	/* Clear ICP flag (Input Capture flag) */
  d6:	d8 bf       	out	0x38, r29	; 56
		TIFR = 1<<TOV1;	/* Clear Timer Overflow flag */
  d8:	c8 bf       	out	0x38, r28	; 56

		/*Calculate width of Echo by Input Capture (ICP) */
		
		while ((TIFR & (1 << ICF1)) == 0);/* Wait for rising edge */
  da:	08 b6       	in	r0, 0x38	; 56
  dc:	05 fe       	sbrs	r0, 5
  de:	fd cf       	rjmp	.-6      	; 0xda <main+0x30>
		TCNT1 = 0;	/* Clear Timer counter */
  e0:	1d bc       	out	0x2d, r1	; 45
  e2:	1c bc       	out	0x2c, r1	; 44
		TCCR1B = 0x01;	/* Capture on falling edge, No prescaler */
  e4:	1e bd       	out	0x2e, r17	; 46
		TIFR = 1<<ICF1;	/* Clear ICP flag (Input Capture flag) */
  e6:	d8 bf       	out	0x38, r29	; 56
		TIFR = 1<<TOV1;	/* Clear Timer Overflow flag */
  e8:	c8 bf       	out	0x38, r28	; 56
		TimerOverflow = 0;/* Clear Timer overflow count */
  ea:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
  ee:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>

		while ((TIFR & (1 << ICF1)) == 0);/* Wait for falling edge */
  f2:	08 b6       	in	r0, 0x38	; 56
  f4:	05 fe       	sbrs	r0, 5
  f6:	fd cf       	rjmp	.-6      	; 0xf2 <main+0x48>
		count = ICR1 + (65535 * TimerOverflow);	/* Take count */
  f8:	66 b5       	in	r22, 0x26	; 38
  fa:	77 b5       	in	r23, 0x27	; 39
		/* 8MHz Timer freq, sound speed =343 m/s */
		distance = (double)count / 466.47;
		
		if(distance < 15.0) {
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 16 01 	call	0x22c	; 0x22c <__floatsisf>
 104:	29 e2       	ldi	r18, 0x29	; 41
 106:	3c e3       	ldi	r19, 0x3C	; 60
 108:	49 ee       	ldi	r20, 0xE9	; 233
 10a:	53 e4       	ldi	r21, 0x43	; 67
 10c:	0e 94 a2 00 	call	0x144	; 0x144 <__divsf3>
 110:	20 e0       	ldi	r18, 0x00	; 0
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	40 e7       	ldi	r20, 0x70	; 112
 116:	51 e4       	ldi	r21, 0x41	; 65
 118:	0e 94 9d 00 	call	0x13a	; 0x13a <__cmpsf2>
 11c:	88 23       	and	r24, r24
 11e:	14 f4       	brge	.+4      	; 0x124 <main+0x7a>
			PORTB |= 0b010000000;
 120:	c7 9a       	sbi	0x18, 7	; 24
 122:	01 c0       	rjmp	.+2      	; 0x126 <main+0x7c>
		}
		else {
			PORTB &= 0b10111111;
 124:	c6 98       	cbi	0x18, 6	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	91 ee       	ldi	r25, 0xE1	; 225
 12a:	24 e0       	ldi	r18, 0x04	; 4
 12c:	81 50       	subi	r24, 0x01	; 1
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	20 40       	sbci	r18, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0x82>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x8c>
 136:	00 00       	nop
 138:	c5 cf       	rjmp	.-118    	; 0xc4 <main+0x1a>

0000013a <__cmpsf2>:
 13a:	0e 94 51 01 	call	0x2a2	; 0x2a2 <__fp_cmp>
 13e:	08 f4       	brcc	.+2      	; 0x142 <__cmpsf2+0x8>
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	08 95       	ret

00000144 <__divsf3>:
 144:	0e 94 b6 00 	call	0x16c	; 0x16c <__divsf3x>
 148:	0c 94 8c 01 	jmp	0x318	; 0x318 <__fp_round>
 14c:	0e 94 85 01 	call	0x30a	; 0x30a <__fp_pscB>
 150:	58 f0       	brcs	.+22     	; 0x168 <__divsf3+0x24>
 152:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__fp_pscA>
 156:	40 f0       	brcs	.+16     	; 0x168 <__divsf3+0x24>
 158:	29 f4       	brne	.+10     	; 0x164 <__divsf3+0x20>
 15a:	5f 3f       	cpi	r21, 0xFF	; 255
 15c:	29 f0       	breq	.+10     	; 0x168 <__divsf3+0x24>
 15e:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__fp_inf>
 162:	51 11       	cpse	r21, r1
 164:	0c 94 c0 01 	jmp	0x380	; 0x380 <__fp_szero>
 168:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__fp_nan>

0000016c <__divsf3x>:
 16c:	0e 94 9d 01 	call	0x33a	; 0x33a <__fp_split3>
 170:	68 f3       	brcs	.-38     	; 0x14c <__divsf3+0x8>

00000172 <__divsf3_pse>:
 172:	99 23       	and	r25, r25
 174:	b1 f3       	breq	.-20     	; 0x162 <__divsf3+0x1e>
 176:	55 23       	and	r21, r21
 178:	91 f3       	breq	.-28     	; 0x15e <__divsf3+0x1a>
 17a:	95 1b       	sub	r25, r21
 17c:	55 0b       	sbc	r21, r21
 17e:	bb 27       	eor	r27, r27
 180:	aa 27       	eor	r26, r26
 182:	62 17       	cp	r22, r18
 184:	73 07       	cpc	r23, r19
 186:	84 07       	cpc	r24, r20
 188:	38 f0       	brcs	.+14     	; 0x198 <__divsf3_pse+0x26>
 18a:	9f 5f       	subi	r25, 0xFF	; 255
 18c:	5f 4f       	sbci	r21, 0xFF	; 255
 18e:	22 0f       	add	r18, r18
 190:	33 1f       	adc	r19, r19
 192:	44 1f       	adc	r20, r20
 194:	aa 1f       	adc	r26, r26
 196:	a9 f3       	breq	.-22     	; 0x182 <__divsf3_pse+0x10>
 198:	35 d0       	rcall	.+106    	; 0x204 <__divsf3_pse+0x92>
 19a:	0e 2e       	mov	r0, r30
 19c:	3a f0       	brmi	.+14     	; 0x1ac <__divsf3_pse+0x3a>
 19e:	e0 e8       	ldi	r30, 0x80	; 128
 1a0:	32 d0       	rcall	.+100    	; 0x206 <__divsf3_pse+0x94>
 1a2:	91 50       	subi	r25, 0x01	; 1
 1a4:	50 40       	sbci	r21, 0x00	; 0
 1a6:	e6 95       	lsr	r30
 1a8:	00 1c       	adc	r0, r0
 1aa:	ca f7       	brpl	.-14     	; 0x19e <__divsf3_pse+0x2c>
 1ac:	2b d0       	rcall	.+86     	; 0x204 <__divsf3_pse+0x92>
 1ae:	fe 2f       	mov	r31, r30
 1b0:	29 d0       	rcall	.+82     	; 0x204 <__divsf3_pse+0x92>
 1b2:	66 0f       	add	r22, r22
 1b4:	77 1f       	adc	r23, r23
 1b6:	88 1f       	adc	r24, r24
 1b8:	bb 1f       	adc	r27, r27
 1ba:	26 17       	cp	r18, r22
 1bc:	37 07       	cpc	r19, r23
 1be:	48 07       	cpc	r20, r24
 1c0:	ab 07       	cpc	r26, r27
 1c2:	b0 e8       	ldi	r27, 0x80	; 128
 1c4:	09 f0       	breq	.+2      	; 0x1c8 <__divsf3_pse+0x56>
 1c6:	bb 0b       	sbc	r27, r27
 1c8:	80 2d       	mov	r24, r0
 1ca:	bf 01       	movw	r22, r30
 1cc:	ff 27       	eor	r31, r31
 1ce:	93 58       	subi	r25, 0x83	; 131
 1d0:	5f 4f       	sbci	r21, 0xFF	; 255
 1d2:	3a f0       	brmi	.+14     	; 0x1e2 <__divsf3_pse+0x70>
 1d4:	9e 3f       	cpi	r25, 0xFE	; 254
 1d6:	51 05       	cpc	r21, r1
 1d8:	78 f0       	brcs	.+30     	; 0x1f8 <__divsf3_pse+0x86>
 1da:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__fp_inf>
 1de:	0c 94 c0 01 	jmp	0x380	; 0x380 <__fp_szero>
 1e2:	5f 3f       	cpi	r21, 0xFF	; 255
 1e4:	e4 f3       	brlt	.-8      	; 0x1de <__divsf3_pse+0x6c>
 1e6:	98 3e       	cpi	r25, 0xE8	; 232
 1e8:	d4 f3       	brlt	.-12     	; 0x1de <__divsf3_pse+0x6c>
 1ea:	86 95       	lsr	r24
 1ec:	77 95       	ror	r23
 1ee:	67 95       	ror	r22
 1f0:	b7 95       	ror	r27
 1f2:	f7 95       	ror	r31
 1f4:	9f 5f       	subi	r25, 0xFF	; 255
 1f6:	c9 f7       	brne	.-14     	; 0x1ea <__divsf3_pse+0x78>
 1f8:	88 0f       	add	r24, r24
 1fa:	91 1d       	adc	r25, r1
 1fc:	96 95       	lsr	r25
 1fe:	87 95       	ror	r24
 200:	97 f9       	bld	r25, 7
 202:	08 95       	ret
 204:	e1 e0       	ldi	r30, 0x01	; 1
 206:	66 0f       	add	r22, r22
 208:	77 1f       	adc	r23, r23
 20a:	88 1f       	adc	r24, r24
 20c:	bb 1f       	adc	r27, r27
 20e:	62 17       	cp	r22, r18
 210:	73 07       	cpc	r23, r19
 212:	84 07       	cpc	r24, r20
 214:	ba 07       	cpc	r27, r26
 216:	20 f0       	brcs	.+8      	; 0x220 <__divsf3_pse+0xae>
 218:	62 1b       	sub	r22, r18
 21a:	73 0b       	sbc	r23, r19
 21c:	84 0b       	sbc	r24, r20
 21e:	ba 0b       	sbc	r27, r26
 220:	ee 1f       	adc	r30, r30
 222:	88 f7       	brcc	.-30     	; 0x206 <__divsf3_pse+0x94>
 224:	e0 95       	com	r30
 226:	08 95       	ret

00000228 <__floatunsisf>:
 228:	e8 94       	clt
 22a:	09 c0       	rjmp	.+18     	; 0x23e <__floatsisf+0x12>

0000022c <__floatsisf>:
 22c:	97 fb       	bst	r25, 7
 22e:	3e f4       	brtc	.+14     	; 0x23e <__floatsisf+0x12>
 230:	90 95       	com	r25
 232:	80 95       	com	r24
 234:	70 95       	com	r23
 236:	61 95       	neg	r22
 238:	7f 4f       	sbci	r23, 0xFF	; 255
 23a:	8f 4f       	sbci	r24, 0xFF	; 255
 23c:	9f 4f       	sbci	r25, 0xFF	; 255
 23e:	99 23       	and	r25, r25
 240:	a9 f0       	breq	.+42     	; 0x26c <__floatsisf+0x40>
 242:	f9 2f       	mov	r31, r25
 244:	96 e9       	ldi	r25, 0x96	; 150
 246:	bb 27       	eor	r27, r27
 248:	93 95       	inc	r25
 24a:	f6 95       	lsr	r31
 24c:	87 95       	ror	r24
 24e:	77 95       	ror	r23
 250:	67 95       	ror	r22
 252:	b7 95       	ror	r27
 254:	f1 11       	cpse	r31, r1
 256:	f8 cf       	rjmp	.-16     	; 0x248 <__floatsisf+0x1c>
 258:	fa f4       	brpl	.+62     	; 0x298 <__floatsisf+0x6c>
 25a:	bb 0f       	add	r27, r27
 25c:	11 f4       	brne	.+4      	; 0x262 <__floatsisf+0x36>
 25e:	60 ff       	sbrs	r22, 0
 260:	1b c0       	rjmp	.+54     	; 0x298 <__floatsisf+0x6c>
 262:	6f 5f       	subi	r22, 0xFF	; 255
 264:	7f 4f       	sbci	r23, 0xFF	; 255
 266:	8f 4f       	sbci	r24, 0xFF	; 255
 268:	9f 4f       	sbci	r25, 0xFF	; 255
 26a:	16 c0       	rjmp	.+44     	; 0x298 <__floatsisf+0x6c>
 26c:	88 23       	and	r24, r24
 26e:	11 f0       	breq	.+4      	; 0x274 <__floatsisf+0x48>
 270:	96 e9       	ldi	r25, 0x96	; 150
 272:	11 c0       	rjmp	.+34     	; 0x296 <__floatsisf+0x6a>
 274:	77 23       	and	r23, r23
 276:	21 f0       	breq	.+8      	; 0x280 <__floatsisf+0x54>
 278:	9e e8       	ldi	r25, 0x8E	; 142
 27a:	87 2f       	mov	r24, r23
 27c:	76 2f       	mov	r23, r22
 27e:	05 c0       	rjmp	.+10     	; 0x28a <__floatsisf+0x5e>
 280:	66 23       	and	r22, r22
 282:	71 f0       	breq	.+28     	; 0x2a0 <__floatsisf+0x74>
 284:	96 e8       	ldi	r25, 0x86	; 134
 286:	86 2f       	mov	r24, r22
 288:	70 e0       	ldi	r23, 0x00	; 0
 28a:	60 e0       	ldi	r22, 0x00	; 0
 28c:	2a f0       	brmi	.+10     	; 0x298 <__floatsisf+0x6c>
 28e:	9a 95       	dec	r25
 290:	66 0f       	add	r22, r22
 292:	77 1f       	adc	r23, r23
 294:	88 1f       	adc	r24, r24
 296:	da f7       	brpl	.-10     	; 0x28e <__floatsisf+0x62>
 298:	88 0f       	add	r24, r24
 29a:	96 95       	lsr	r25
 29c:	87 95       	ror	r24
 29e:	97 f9       	bld	r25, 7
 2a0:	08 95       	ret

000002a2 <__fp_cmp>:
 2a2:	99 0f       	add	r25, r25
 2a4:	00 08       	sbc	r0, r0
 2a6:	55 0f       	add	r21, r21
 2a8:	aa 0b       	sbc	r26, r26
 2aa:	e0 e8       	ldi	r30, 0x80	; 128
 2ac:	fe ef       	ldi	r31, 0xFE	; 254
 2ae:	16 16       	cp	r1, r22
 2b0:	17 06       	cpc	r1, r23
 2b2:	e8 07       	cpc	r30, r24
 2b4:	f9 07       	cpc	r31, r25
 2b6:	c0 f0       	brcs	.+48     	; 0x2e8 <__fp_cmp+0x46>
 2b8:	12 16       	cp	r1, r18
 2ba:	13 06       	cpc	r1, r19
 2bc:	e4 07       	cpc	r30, r20
 2be:	f5 07       	cpc	r31, r21
 2c0:	98 f0       	brcs	.+38     	; 0x2e8 <__fp_cmp+0x46>
 2c2:	62 1b       	sub	r22, r18
 2c4:	73 0b       	sbc	r23, r19
 2c6:	84 0b       	sbc	r24, r20
 2c8:	95 0b       	sbc	r25, r21
 2ca:	39 f4       	brne	.+14     	; 0x2da <__fp_cmp+0x38>
 2cc:	0a 26       	eor	r0, r26
 2ce:	61 f0       	breq	.+24     	; 0x2e8 <__fp_cmp+0x46>
 2d0:	23 2b       	or	r18, r19
 2d2:	24 2b       	or	r18, r20
 2d4:	25 2b       	or	r18, r21
 2d6:	21 f4       	brne	.+8      	; 0x2e0 <__fp_cmp+0x3e>
 2d8:	08 95       	ret
 2da:	0a 26       	eor	r0, r26
 2dc:	09 f4       	brne	.+2      	; 0x2e0 <__fp_cmp+0x3e>
 2de:	a1 40       	sbci	r26, 0x01	; 1
 2e0:	a6 95       	lsr	r26
 2e2:	8f ef       	ldi	r24, 0xFF	; 255
 2e4:	81 1d       	adc	r24, r1
 2e6:	81 1d       	adc	r24, r1
 2e8:	08 95       	ret

000002ea <__fp_inf>:
 2ea:	97 f9       	bld	r25, 7
 2ec:	9f 67       	ori	r25, 0x7F	; 127
 2ee:	80 e8       	ldi	r24, 0x80	; 128
 2f0:	70 e0       	ldi	r23, 0x00	; 0
 2f2:	60 e0       	ldi	r22, 0x00	; 0
 2f4:	08 95       	ret

000002f6 <__fp_nan>:
 2f6:	9f ef       	ldi	r25, 0xFF	; 255
 2f8:	80 ec       	ldi	r24, 0xC0	; 192
 2fa:	08 95       	ret

000002fc <__fp_pscA>:
 2fc:	00 24       	eor	r0, r0
 2fe:	0a 94       	dec	r0
 300:	16 16       	cp	r1, r22
 302:	17 06       	cpc	r1, r23
 304:	18 06       	cpc	r1, r24
 306:	09 06       	cpc	r0, r25
 308:	08 95       	ret

0000030a <__fp_pscB>:
 30a:	00 24       	eor	r0, r0
 30c:	0a 94       	dec	r0
 30e:	12 16       	cp	r1, r18
 310:	13 06       	cpc	r1, r19
 312:	14 06       	cpc	r1, r20
 314:	05 06       	cpc	r0, r21
 316:	08 95       	ret

00000318 <__fp_round>:
 318:	09 2e       	mov	r0, r25
 31a:	03 94       	inc	r0
 31c:	00 0c       	add	r0, r0
 31e:	11 f4       	brne	.+4      	; 0x324 <__fp_round+0xc>
 320:	88 23       	and	r24, r24
 322:	52 f0       	brmi	.+20     	; 0x338 <__fp_round+0x20>
 324:	bb 0f       	add	r27, r27
 326:	40 f4       	brcc	.+16     	; 0x338 <__fp_round+0x20>
 328:	bf 2b       	or	r27, r31
 32a:	11 f4       	brne	.+4      	; 0x330 <__fp_round+0x18>
 32c:	60 ff       	sbrs	r22, 0
 32e:	04 c0       	rjmp	.+8      	; 0x338 <__fp_round+0x20>
 330:	6f 5f       	subi	r22, 0xFF	; 255
 332:	7f 4f       	sbci	r23, 0xFF	; 255
 334:	8f 4f       	sbci	r24, 0xFF	; 255
 336:	9f 4f       	sbci	r25, 0xFF	; 255
 338:	08 95       	ret

0000033a <__fp_split3>:
 33a:	57 fd       	sbrc	r21, 7
 33c:	90 58       	subi	r25, 0x80	; 128
 33e:	44 0f       	add	r20, r20
 340:	55 1f       	adc	r21, r21
 342:	59 f0       	breq	.+22     	; 0x35a <__fp_splitA+0x10>
 344:	5f 3f       	cpi	r21, 0xFF	; 255
 346:	71 f0       	breq	.+28     	; 0x364 <__fp_splitA+0x1a>
 348:	47 95       	ror	r20

0000034a <__fp_splitA>:
 34a:	88 0f       	add	r24, r24
 34c:	97 fb       	bst	r25, 7
 34e:	99 1f       	adc	r25, r25
 350:	61 f0       	breq	.+24     	; 0x36a <__fp_splitA+0x20>
 352:	9f 3f       	cpi	r25, 0xFF	; 255
 354:	79 f0       	breq	.+30     	; 0x374 <__fp_splitA+0x2a>
 356:	87 95       	ror	r24
 358:	08 95       	ret
 35a:	12 16       	cp	r1, r18
 35c:	13 06       	cpc	r1, r19
 35e:	14 06       	cpc	r1, r20
 360:	55 1f       	adc	r21, r21
 362:	f2 cf       	rjmp	.-28     	; 0x348 <__fp_split3+0xe>
 364:	46 95       	lsr	r20
 366:	f1 df       	rcall	.-30     	; 0x34a <__fp_splitA>
 368:	08 c0       	rjmp	.+16     	; 0x37a <__fp_splitA+0x30>
 36a:	16 16       	cp	r1, r22
 36c:	17 06       	cpc	r1, r23
 36e:	18 06       	cpc	r1, r24
 370:	99 1f       	adc	r25, r25
 372:	f1 cf       	rjmp	.-30     	; 0x356 <__fp_splitA+0xc>
 374:	86 95       	lsr	r24
 376:	71 05       	cpc	r23, r1
 378:	61 05       	cpc	r22, r1
 37a:	08 94       	sec
 37c:	08 95       	ret

0000037e <__fp_zero>:
 37e:	e8 94       	clt

00000380 <__fp_szero>:
 380:	bb 27       	eor	r27, r27
 382:	66 27       	eor	r22, r22
 384:	77 27       	eor	r23, r23
 386:	cb 01       	movw	r24, r22
 388:	97 f9       	bld	r25, 7
 38a:	08 95       	ret

0000038c <_exit>:
 38c:	f8 94       	cli

0000038e <__stop_program>:
 38e:	ff cf       	rjmp	.-2      	; 0x38e <__stop_program>
