
sonarNew.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000174  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  000001e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000738  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005ed  00000000  00000000  000009b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000300  00000000  00000000  00000fa1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  000012a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000037c  00000000  00000000  000012ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000138  00000000  00000000  00001668  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000017a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 6f 00 	call	0xde	; 0xde <main>
  74:	0c 94 b8 00 	jmp	0x170	; 0x170 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_1>:
static volatile int p2 = 0;
static volatile int i2 = 0;
static int count=0;

ISR(INT0_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
	if(i == 1)
  8a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <_ZL1i>
  8e:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <_ZL1i+0x1>
  92:	01 97       	sbiw	r24, 0x01	; 1
  94:	71 f4       	brne	.+28     	; 0xb2 <__vector_1+0x36>
	{
		TCCR1B = 0;
  96:	1e bc       	out	0x2e, r1	; 46
		pulse = TCNT1;
  98:	8c b5       	in	r24, 0x2c	; 44
  9a:	9d b5       	in	r25, 0x2d	; 45
  9c:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <_ZL5pulse+0x1>
  a0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <_ZL5pulse>
		TCNT1 = 0;
  a4:	1d bc       	out	0x2d, r1	; 45
  a6:	1c bc       	out	0x2c, r1	; 44
		i = 0;
  a8:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <_ZL1i+0x1>
  ac:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <_ZL1i>
  b0:	0f c0       	rjmp	.+30     	; 0xd0 <__vector_1+0x54>
	}

	else if(i==0)
  b2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <_ZL1i>
  b6:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <_ZL1i+0x1>
  ba:	89 2b       	or	r24, r25
  bc:	49 f4       	brne	.+18     	; 0xd0 <__vector_1+0x54>
	{
		TCCR1B |= 1<<CS10;
  be:	8e b5       	in	r24, 0x2e	; 46
  c0:	81 60       	ori	r24, 0x01	; 1
  c2:	8e bd       	out	0x2e, r24	; 46
		i = 1;
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <_ZL1i+0x1>
  cc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <_ZL1i>
	}
}
  d0:	9f 91       	pop	r25
  d2:	8f 91       	pop	r24
  d4:	0f 90       	pop	r0
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	0f 90       	pop	r0
  da:	1f 90       	pop	r1
  dc:	18 95       	reti

000000de <main>:
*/

int main(void)
{
	int count_a = 255;
	DDRD = 0b11111011;
  de:	8b ef       	ldi	r24, 0xFB	; 251
  e0:	81 bb       	out	0x11, r24	; 17
	DDRB = 0xFF;
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;
  e6:	18 ba       	out	0x18, r1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	83 ed       	ldi	r24, 0xD3	; 211
  ea:	90 e3       	ldi	r25, 0x30	; 48
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <main+0xe>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x14>
  f2:	00 00       	nop
	_delay_ms(50);

	GICR |= 1<<INT0;
  f4:	8b b7       	in	r24, 0x3b	; 59
  f6:	80 64       	ori	r24, 0x40	; 64
  f8:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= 1<<ISC00;
  fa:	85 b7       	in	r24, 0x35	; 53
  fc:	81 60       	ori	r24, 0x01	; 1
  fe:	85 bf       	out	0x35, r24	; 53

	sei();
 100:	78 94       	sei
		PORTD &= ~(1<<PIND0);
		_delay_ms(1000);
		count_a = pulse/58;

		if(count_a < 15) {
			PORTB = 0x01;
 102:	21 e0       	ldi	r18, 0x01	; 1
			if(count<5)
				count++;
			else if(count==5)
				count--;
 104:	44 e0       	ldi	r20, 0x04	; 4
 106:	50 e0       	ldi	r21, 0x00	; 0
		else {
			PORTB = 0x00;
		}
		
		if(count==5)
			PORTB = 0x02;
 108:	32 e0       	ldi	r19, 0x02	; 2

	sei();
	
	while(1)
	{
		PORTD |= 1<<PIND0;
 10a:	90 9a       	sbi	0x12, 0	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	95 e0       	ldi	r25, 0x05	; 5
 10e:	9a 95       	dec	r25
 110:	f1 f7       	brne	.-4      	; 0x10e <main+0x30>
		_delay_us(15);
		PORTD &= ~(1<<PIND0);
 112:	90 98       	cbi	0x12, 0	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	6f e3       	ldi	r22, 0x3F	; 63
 116:	8d e0       	ldi	r24, 0x0D	; 13
 118:	93 e0       	ldi	r25, 0x03	; 3
 11a:	61 50       	subi	r22, 0x01	; 1
 11c:	80 40       	sbci	r24, 0x00	; 0
 11e:	90 40       	sbci	r25, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <main+0x3c>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0x46>
 124:	00 00       	nop
		_delay_ms(1000);
		count_a = pulse/58;
 126:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <_ZL5pulse>
 12a:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <_ZL5pulse+0x1>

		if(count_a < 15) {
 12e:	86 36       	cpi	r24, 0x66	; 102
 130:	93 40       	sbci	r25, 0x03	; 3
 132:	ac f4       	brge	.+42     	; 0x15e <main+0x80>
			PORTB = 0x01;
 134:	28 bb       	out	0x18, r18	; 24
			if(count<5)
 136:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 13a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 13e:	85 30       	cpi	r24, 0x05	; 5
 140:	91 05       	cpc	r25, r1
 142:	34 f4       	brge	.+12     	; 0x150 <main+0x72>
				count++;
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 14a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 14e:	08 c0       	rjmp	.+16     	; 0x160 <main+0x82>
			else if(count==5)
 150:	05 97       	sbiw	r24, 0x05	; 5
 152:	d9 f6       	brne	.-74     	; 0x10a <main+0x2c>
				count--;
 154:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <_edata+0x1>
 158:	40 93 60 00 	sts	0x0060, r20	; 0x800060 <_edata>
 15c:	d6 cf       	rjmp	.-84     	; 0x10a <main+0x2c>
			
		}
		else {
			PORTB = 0x00;
 15e:	18 ba       	out	0x18, r1	; 24
		}
		
		if(count==5)
 160:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 164:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 168:	05 97       	sbiw	r24, 0x05	; 5
 16a:	79 f6       	brne	.-98     	; 0x10a <main+0x2c>
			PORTB = 0x02;
 16c:	38 bb       	out	0x18, r19	; 24
 16e:	cd cf       	rjmp	.-102    	; 0x10a <main+0x2c>

00000170 <_exit>:
 170:	f8 94       	cli

00000172 <__stop_program>:
 172:	ff cf       	rjmp	.-2      	; 0x172 <__stop_program>
