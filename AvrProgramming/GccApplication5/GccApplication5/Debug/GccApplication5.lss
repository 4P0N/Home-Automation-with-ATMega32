
GccApplication5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000240  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00000240  000002d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000a0  008000a0  00000314  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000344  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000835  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000064c  00000000  00000000  00000be5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000370  00000000  00000000  00001231  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000060  00000000  00000000  000015a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000337  00000000  00000000  00001604  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004a4  00000000  00000000  0000193b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00001ddf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e4       	ldi	r30, 0x40	; 64
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 ea       	ldi	r26, 0xA0	; 160
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3a       	cpi	r26, 0xA2	; 162
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  8a:	0c 94 1e 01 	jmp	0x23c	; 0x23c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_2>:
	{1,1,0,0,0,0,1,1},
	{1,0,0,0,0,0,0,1}
};


ISR(INT1_vect){
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
	cli();
  a2:	f8 94       	cli
	mode ^= 1;
  a4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
  a8:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <__data_end+0x1>
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	82 27       	eor	r24, r18
  b0:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <__data_end+0x1>
  b4:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	8f e4       	ldi	r24, 0x4F	; 79
  ba:	93 ec       	ldi	r25, 0xC3	; 195
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <__vector_2+0x2a>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <__vector_2+0x30>
  c2:	00 00       	nop
	_delay_ms(200);
	sei();
  c4:	78 94       	sei
}
  c6:	9f 91       	pop	r25
  c8:	8f 91       	pop	r24
  ca:	2f 91       	pop	r18
  cc:	0f 90       	pop	r0
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	0f 90       	pop	r0
  d2:	1f 90       	pop	r1
  d4:	18 95       	reti

000000d6 <print>:

void print(char x, char y)
{
	RowPort = (1<<x);
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	a9 01       	movw	r20, r18
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <print+0xc>
  de:	44 0f       	add	r20, r20
  e0:	55 1f       	adc	r21, r21
  e2:	8a 95       	dec	r24
  e4:	e2 f7       	brpl	.-8      	; 0xde <print+0x8>
  e6:	48 bb       	out	0x18, r20	; 24
	ColPort = ~(1<<y);
  e8:	02 c0       	rjmp	.+4      	; 0xee <print+0x18>
  ea:	22 0f       	add	r18, r18
  ec:	33 1f       	adc	r19, r19
  ee:	6a 95       	dec	r22
  f0:	e2 f7       	brpl	.-8      	; 0xea <print+0x14>
  f2:	20 95       	com	r18
  f4:	2b bb       	out	0x1b, r18	; 27
  f6:	08 95       	ret

000000f8 <main>:
}

int main(void)
{
	Drow = 0xFF;
  f8:	8f ef       	ldi	r24, 0xFF	; 255
  fa:	87 bb       	out	0x17, r24	; 23
	Dcol = 0xFF;
  fc:	8a bb       	out	0x1a, r24	; 26
	
	GICR = (1 << INT1);
  fe:	80 e8       	ldi	r24, 0x80	; 128
 100:	8b bf       	out	0x3b, r24	; 59
	MCUCR = MCUCR | 0b00000010;
 102:	85 b7       	in	r24, 0x35	; 53
 104:	82 60       	ori	r24, 0x02	; 2
 106:	85 bf       	out	0x35, r24	; 53
	sei();
 108:	78 94       	sei
	
	int t = 0;
 10a:	a1 2c       	mov	r10, r1
 10c:	b1 2c       	mov	r11, r1
		{
			for (int i = 0; i < 8; i++)
			{
				for (int j = 0; j < 8; j++)
				{
					if (pattern[(i+t)%8][j])
 10e:	0f 2e       	mov	r0, r31
 110:	f4 e6       	ldi	r31, 0x64	; 100
 112:	cf 2e       	mov	r12, r31
 114:	d1 2c       	mov	r13, r1
 116:	f0 2d       	mov	r31, r0
 118:	32 c0       	rjmp	.+100    	; 0x17e <main+0x86>
 11a:	f8 01       	movw	r30, r16
 11c:	81 91       	ld	r24, Z+
 11e:	8f 01       	movw	r16, r30
 120:	88 23       	and	r24, r24
 122:	21 f0       	breq	.+8      	; 0x12c <main+0x34>
					{
						print(i,j);
 124:	6c 2f       	mov	r22, r28
 126:	8d 2f       	mov	r24, r29
 128:	0e 94 6b 00 	call	0xd6	; 0xd6 <print>
 12c:	cf 5f       	subi	r28, 0xFF	; 255
    {
		for (int k = 0; k < 100; k++)
		{
			for (int i = 0; i < 8; i++)
			{
				for (int j = 0; j < 8; j++)
 12e:	c8 30       	cpi	r28, 0x08	; 8
 130:	a1 f7       	brne	.-24     	; 0x11a <main+0x22>
 132:	ff ef       	ldi	r31, 0xFF	; 255
 134:	ef 1a       	sub	r14, r31
 136:	ff 0a       	sbc	r15, r31
 138:	df 5f       	subi	r29, 0xFF	; 255
	
    while (1) 
    {
		for (int k = 0; k < 100; k++)
		{
			for (int i = 0; i < 8; i++)
 13a:	d8 30       	cpi	r29, 0x08	; 8
 13c:	a9 f0       	breq	.+42     	; 0x168 <main+0x70>
 13e:	87 01       	movw	r16, r14
 140:	07 70       	andi	r16, 0x07	; 7
 142:	10 78       	andi	r17, 0x80	; 128
 144:	11 23       	and	r17, r17
 146:	34 f4       	brge	.+12     	; 0x154 <main+0x5c>
 148:	01 50       	subi	r16, 0x01	; 1
 14a:	11 09       	sbc	r17, r1
 14c:	08 6f       	ori	r16, 0xF8	; 248
 14e:	1f 6f       	ori	r17, 0xFF	; 255
 150:	0f 5f       	subi	r16, 0xFF	; 255
 152:	1f 4f       	sbci	r17, 0xFF	; 255
 154:	00 0f       	add	r16, r16
 156:	11 1f       	adc	r17, r17
 158:	00 0f       	add	r16, r16
 15a:	11 1f       	adc	r17, r17
 15c:	00 0f       	add	r16, r16
 15e:	11 1f       	adc	r17, r17
 160:	00 5a       	subi	r16, 0xA0	; 160
 162:	1f 4f       	sbci	r17, 0xFF	; 255
			{
				for (int j = 0; j < 8; j++)
				{
					if (pattern[(i+t)%8][j])
 164:	c0 e0       	ldi	r28, 0x00	; 0
 166:	d9 cf       	rjmp	.-78     	; 0x11a <main+0x22>
						print(i,j);
						//_delay_ms(1);
					}
				}
			}
			RowPort = 0;
 168:	18 ba       	out	0x18, r1	; 24
 16a:	83 ec       	ldi	r24, 0xC3	; 195
 16c:	99 e0       	ldi	r25, 0x09	; 9
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <main+0x76>
 172:	00 c0       	rjmp	.+0      	; 0x174 <main+0x7c>
 174:	00 00       	nop
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	c9 1a       	sub	r12, r25
 17a:	d1 08       	sbc	r13, r1
	
	int t = 0;
	
    while (1) 
    {
		for (int k = 0; k < 100; k++)
 17c:	19 f0       	breq	.+6      	; 0x184 <main+0x8c>
 17e:	75 01       	movw	r14, r10
		{
			for (int i = 0; i < 8; i++)
			{
				for (int j = 0; j < 8; j++)
				{
					if (pattern[(i+t)%8][j])
 180:	d0 e0       	ldi	r29, 0x00	; 0
 182:	dd cf       	rjmp	.-70     	; 0x13e <main+0x46>
			}
			RowPort = 0;
			_delay_ms(10);
		}
		
		if (mode)
 184:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
 188:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <__data_end+0x1>
 18c:	89 2b       	or	r24, r25
 18e:	09 f4       	brne	.+2      	; 0x192 <main+0x9a>
 190:	43 c0       	rjmp	.+134    	; 0x218 <main+0x120>
		{
			t++;
 192:	ef ef       	ldi	r30, 0xFF	; 255
 194:	ae 1a       	sub	r10, r30
 196:	be 0a       	sbc	r11, r30
			continue;
 198:	ba cf       	rjmp	.-140    	; 0x10e <main+0x16>
		{
			for (int i = 0; i < 8; i++)
			{
				for (int j = 0; j < 8; j++)
				{
					if (pattern[(i+k)%8][j])
 19a:	f8 01       	movw	r30, r16
 19c:	81 91       	ld	r24, Z+
 19e:	8f 01       	movw	r16, r30
 1a0:	88 23       	and	r24, r24
 1a2:	51 f0       	breq	.+20     	; 0x1b8 <main+0xc0>
					{
						print(i,j);
 1a4:	6c 2f       	mov	r22, r28
 1a6:	8d 2f       	mov	r24, r29
 1a8:	0e 94 6b 00 	call	0xd6	; 0xd6 <print>
 1ac:	89 ef       	ldi	r24, 0xF9	; 249
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <main+0xb8>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <main+0xbe>
 1b6:	00 00       	nop
 1b8:	cf 5f       	subi	r28, 0xFF	; 255
		
		for (int k = 0; k < 8; k++)
		{
			for (int i = 0; i < 8; i++)
			{
				for (int j = 0; j < 8; j++)
 1ba:	c8 30       	cpi	r28, 0x08	; 8
 1bc:	71 f7       	brne	.-36     	; 0x19a <main+0xa2>
 1be:	9f ef       	ldi	r25, 0xFF	; 255
 1c0:	e9 1a       	sub	r14, r25
 1c2:	f9 0a       	sbc	r15, r25
 1c4:	df 5f       	subi	r29, 0xFF	; 255
			t = 0;
		}
		
		for (int k = 0; k < 8; k++)
		{
			for (int i = 0; i < 8; i++)
 1c6:	d8 30       	cpi	r29, 0x08	; 8
 1c8:	a9 f0       	breq	.+42     	; 0x1f4 <main+0xfc>
 1ca:	87 01       	movw	r16, r14
 1cc:	07 70       	andi	r16, 0x07	; 7
 1ce:	10 78       	andi	r17, 0x80	; 128
 1d0:	11 23       	and	r17, r17
 1d2:	34 f4       	brge	.+12     	; 0x1e0 <main+0xe8>
 1d4:	01 50       	subi	r16, 0x01	; 1
 1d6:	11 09       	sbc	r17, r1
 1d8:	08 6f       	ori	r16, 0xF8	; 248
 1da:	1f 6f       	ori	r17, 0xFF	; 255
 1dc:	0f 5f       	subi	r16, 0xFF	; 255
 1de:	1f 4f       	sbci	r17, 0xFF	; 255
 1e0:	00 0f       	add	r16, r16
 1e2:	11 1f       	adc	r17, r17
 1e4:	00 0f       	add	r16, r16
 1e6:	11 1f       	adc	r17, r17
 1e8:	00 0f       	add	r16, r16
 1ea:	11 1f       	adc	r17, r17
 1ec:	00 5a       	subi	r16, 0xA0	; 160
 1ee:	1f 4f       	sbci	r17, 0xFF	; 255
			{
				for (int j = 0; j < 8; j++)
				{
					if (pattern[(i+k)%8][j])
 1f0:	c0 e0       	ldi	r28, 0x00	; 0
 1f2:	d3 cf       	rjmp	.-90     	; 0x19a <main+0xa2>
						print(i,j);
						_delay_ms(1);
					}
				}
			}
			RowPort = 0;
 1f4:	18 ba       	out	0x18, r1	; 24
 1f6:	ef e9       	ldi	r30, 0x9F	; 159
 1f8:	f6 e8       	ldi	r31, 0x86	; 134
 1fa:	21 e0       	ldi	r18, 0x01	; 1
 1fc:	e1 50       	subi	r30, 0x01	; 1
 1fe:	f0 40       	sbci	r31, 0x00	; 0
 200:	20 40       	sbci	r18, 0x00	; 0
 202:	e1 f7       	brne	.-8      	; 0x1fc <main+0x104>
 204:	00 c0       	rjmp	.+0      	; 0x206 <main+0x10e>
 206:	00 00       	nop
		else
		{
			t = 0;
		}
		
		for (int k = 0; k < 8; k++)
 208:	8f ef       	ldi	r24, 0xFF	; 255
 20a:	c8 1a       	sub	r12, r24
 20c:	d8 0a       	sbc	r13, r24
 20e:	98 e0       	ldi	r25, 0x08	; 8
 210:	c9 16       	cp	r12, r25
 212:	d1 04       	cpc	r13, r1
 214:	19 f4       	brne	.+6      	; 0x21c <main+0x124>
 216:	05 c0       	rjmp	.+10     	; 0x222 <main+0x12a>
 218:	c1 2c       	mov	r12, r1
 21a:	d1 2c       	mov	r13, r1
 21c:	76 01       	movw	r14, r12
		{
			for (int i = 0; i < 8; i++)
			{
				for (int j = 0; j < 8; j++)
				{
					if (pattern[(i+k)%8][j])
 21e:	d0 e0       	ldi	r29, 0x00	; 0
 220:	d4 cf       	rjmp	.-88     	; 0x1ca <main+0xd2>
		}
		
		//print(0,1);
		//_delay_ms(1000);
		
		RowPort = 0;
 222:	18 ba       	out	0x18, r1	; 24
 224:	ef e3       	ldi	r30, 0x3F	; 63
 226:	fd e0       	ldi	r31, 0x0D	; 13
 228:	23 e0       	ldi	r18, 0x03	; 3
 22a:	e1 50       	subi	r30, 0x01	; 1
 22c:	f0 40       	sbci	r31, 0x00	; 0
 22e:	20 40       	sbci	r18, 0x00	; 0
 230:	e1 f7       	brne	.-8      	; 0x22a <main+0x132>
 232:	00 c0       	rjmp	.+0      	; 0x234 <main+0x13c>
 234:	00 00       	nop
			t++;
			continue;
		}
		else
		{
			t = 0;
 236:	a1 2c       	mov	r10, r1
 238:	b1 2c       	mov	r11, r1
 23a:	69 cf       	rjmp	.-302    	; 0x10e <main+0x16>

0000023c <_exit>:
 23c:	f8 94       	cli

0000023e <__stop_program>:
 23e:	ff cf       	rjmp	.-2      	; 0x23e <__stop_program>
