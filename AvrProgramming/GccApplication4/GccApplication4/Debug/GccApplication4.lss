
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000025a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  0000025a  000002ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000a0  008000a0  0000032e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000032e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000360  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000807  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000062a  00000000  00000000  00000bd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000372  00000000  00000000  000011fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00001570  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000337  00000000  00000000  000015d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003c8  00000000  00000000  0000190b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00001cd3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e5       	ldi	r30, 0x5A	; 90
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 ea       	ldi	r26, 0xA0	; 160
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 3a       	cpi	r26, 0xA4	; 164
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 85 00 	call	0x10a	; 0x10a <main>
  8a:	0c 94 2b 01 	jmp	0x256	; 0x256 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_2>:
	{1,1,0,0,0,0,1,1},
	{0,0,0,0,0,0,0,0}
};


ISR(INT1_vect){
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	8f 93       	push	r24
  a2:	9f 93       	push	r25
	cli();
  a4:	f8 94       	cli
	RowPort = 0;
  a6:	18 ba       	out	0x18, r1	; 24
	mode = 1 - mode;
  a8:	20 91 a2 00 	lds	r18, 0x00A2	; 0x8000a2 <mode>
  ac:	30 91 a3 00 	lds	r19, 0x00A3	; 0x8000a3 <mode+0x1>
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	82 1b       	sub	r24, r18
  b6:	93 0b       	sbc	r25, r19
  b8:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <mode+0x1>
  bc:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <mode>
	t = 0;
  c0:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__data_end+0x1>
  c4:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	8f e4       	ldi	r24, 0x4F	; 79
  ca:	93 ec       	ldi	r25, 0xC3	; 195
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <__vector_2+0x3a>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <__vector_2+0x40>
  d2:	00 00       	nop
	_delay_ms(200);
	sei();
  d4:	78 94       	sei
}
  d6:	9f 91       	pop	r25
  d8:	8f 91       	pop	r24
  da:	3f 91       	pop	r19
  dc:	2f 91       	pop	r18
  de:	0f 90       	pop	r0
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	0f 90       	pop	r0
  e4:	1f 90       	pop	r1
  e6:	18 95       	reti

000000e8 <print>:

void print(char x, char y)
{
	RowPort = (1<<x);
  e8:	21 e0       	ldi	r18, 0x01	; 1
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	a9 01       	movw	r20, r18
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <print+0xc>
  f0:	44 0f       	add	r20, r20
  f2:	55 1f       	adc	r21, r21
  f4:	8a 95       	dec	r24
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <print+0x8>
  f8:	48 bb       	out	0x18, r20	; 24
	ColPort = ~(1<<y);
  fa:	02 c0       	rjmp	.+4      	; 0x100 <print+0x18>
  fc:	22 0f       	add	r18, r18
  fe:	33 1f       	adc	r19, r19
 100:	6a 95       	dec	r22
 102:	e2 f7       	brpl	.-8      	; 0xfc <print+0x14>
 104:	20 95       	com	r18
 106:	2b bb       	out	0x1b, r18	; 27
 108:	08 95       	ret

0000010a <main>:
}

int main(void)
{
	Drow = 0xFF;
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	87 bb       	out	0x17, r24	; 23
	Dcol = 0xFF;
 10e:	8a bb       	out	0x1a, r24	; 26
	
	GICR = (1 << INT1);
 110:	80 e8       	ldi	r24, 0x80	; 128
 112:	8b bf       	out	0x3b, r24	; 59
	MCUCR = MCUCR | 0b00001000;
 114:	85 b7       	in	r24, 0x35	; 53
 116:	88 60       	ori	r24, 0x08	; 8
 118:	85 bf       	out	0x35, r24	; 53
	MCUCR = MCUCR & 0b11111011;
 11a:	85 b7       	in	r24, 0x35	; 53
 11c:	8b 7f       	andi	r24, 0xFB	; 251
 11e:	85 bf       	out	0x35, r24	; 53
	sei();
 120:	78 94       	sei
	
    /* Replace with your application code */
    while (1) 
    {
		if(mode == 0) {
 122:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <mode>
 126:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <mode+0x1>
 12a:	89 2b       	or	r24, r25
 12c:	41 f0       	breq	.+16     	; 0x13e <main+0x34>
 12e:	45 c0       	rjmp	.+138    	; 0x1ba <main+0xb0>
			for (int k = 0; k < 100; k++) {
				if(mode != 0) {break;}
 130:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <mode>
 134:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <mode+0x1>
 138:	89 2b       	or	r24, r25
 13a:	31 f0       	breq	.+12     	; 0x148 <main+0x3e>
 13c:	2d c0       	rjmp	.+90     	; 0x198 <main+0x8e>
 13e:	0f 2e       	mov	r0, r31
 140:	f4 e6       	ldi	r31, 0x64	; 100
 142:	cf 2e       	mov	r12, r31
 144:	d1 2c       	mov	r13, r1
 146:	f0 2d       	mov	r31, r0
 148:	0f 2e       	mov	r0, r31
 14a:	f0 e6       	ldi	r31, 0x60	; 96
 14c:	ef 2e       	mov	r14, r31
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	ff 2e       	mov	r15, r31
 152:	f0 2d       	mov	r31, r0
 154:	d0 e0       	ldi	r29, 0x00	; 0
 156:	12 c0       	rjmp	.+36     	; 0x17c <main+0x72>
				for (int i = 0; i < 8; i++) {
					//if(mode != 0) {break;}
					for (int j = 0; j < 8; j++) {
						//if(mode != 0) {break;}
						if (pattern[i][j]) {
 158:	f8 01       	movw	r30, r16
 15a:	81 91       	ld	r24, Z+
 15c:	8f 01       	movw	r16, r30
 15e:	88 23       	and	r24, r24
 160:	21 f0       	breq	.+8      	; 0x16a <main+0x60>
							print(i,j);
 162:	6c 2f       	mov	r22, r28
 164:	8d 2f       	mov	r24, r29
 166:	0e 94 74 00 	call	0xe8	; 0xe8 <print>
 16a:	cf 5f       	subi	r28, 0xFF	; 255
		if(mode == 0) {
			for (int k = 0; k < 100; k++) {
				if(mode != 0) {break;}
				for (int i = 0; i < 8; i++) {
					//if(mode != 0) {break;}
					for (int j = 0; j < 8; j++) {
 16c:	c8 30       	cpi	r28, 0x08	; 8
 16e:	a1 f7       	brne	.-24     	; 0x158 <main+0x4e>
 170:	f8 e0       	ldi	r31, 0x08	; 8
 172:	ef 0e       	add	r14, r31
 174:	f1 1c       	adc	r15, r1
 176:	df 5f       	subi	r29, 0xFF	; 255
    while (1) 
    {
		if(mode == 0) {
			for (int k = 0; k < 100; k++) {
				if(mode != 0) {break;}
				for (int i = 0; i < 8; i++) {
 178:	d8 30       	cpi	r29, 0x08	; 8
 17a:	19 f0       	breq	.+6      	; 0x182 <main+0x78>
 17c:	87 01       	movw	r16, r14
 17e:	c0 e0       	ldi	r28, 0x00	; 0
 180:	eb cf       	rjmp	.-42     	; 0x158 <main+0x4e>
							print(i,j);
							//_delay_ms(1);
						}
					}
				}
				RowPort = 0;
 182:	18 ba       	out	0x18, r1	; 24
 184:	83 ec       	ldi	r24, 0xC3	; 195
 186:	99 e0       	ldi	r25, 0x09	; 9
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <main+0x7e>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <main+0x84>
 18e:	00 00       	nop
 190:	91 e0       	ldi	r25, 0x01	; 1
 192:	c9 1a       	sub	r12, r25
 194:	d1 08       	sbc	r13, r1
	
    /* Replace with your application code */
    while (1) 
    {
		if(mode == 0) {
			for (int k = 0; k < 100; k++) {
 196:	61 f6       	brne	.-104    	; 0x130 <main+0x26>
					}
				}
				RowPort = 0;
				_delay_ms(10);
			}
			RowPort = 0;
 198:	18 ba       	out	0x18, r1	; 24
 19a:	ef e3       	ldi	r30, 0x3F	; 63
 19c:	fd e0       	ldi	r31, 0x0D	; 13
 19e:	23 e0       	ldi	r18, 0x03	; 3
 1a0:	e1 50       	subi	r30, 0x01	; 1
 1a2:	f0 40       	sbci	r31, 0x00	; 0
 1a4:	20 40       	sbci	r18, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <main+0x96>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <main+0xa0>
 1aa:	00 00       	nop
			_delay_ms(1000);
		}
		
		if(mode != 0) {
 1ac:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <mode>
 1b0:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <mode+0x1>
 1b4:	89 2b       	or	r24, r25
 1b6:	09 f4       	brne	.+2      	; 0x1ba <main+0xb0>
 1b8:	b4 cf       	rjmp	.-152    	; 0x122 <main+0x18>
 1ba:	a1 2c       	mov	r10, r1
 1bc:	b1 2c       	mov	r11, r1
 1be:	07 c0       	rjmp	.+14     	; 0x1ce <main+0xc4>
			for (int k = 0; k < 8; k++) {
				if(mode == 0) {break;}
 1c0:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <mode>
 1c4:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <mode+0x1>
 1c8:	89 2b       	or	r24, r25
 1ca:	09 f4       	brne	.+2      	; 0x1ce <main+0xc4>
 1cc:	aa cf       	rjmp	.-172    	; 0x122 <main+0x18>
					//if(mode == 0) {break;}
					for (int i = 0; i < 8; i++) {
						//if(mode == 0) {break;}
						for (int j = 0; j < 8; j++) {
							//if(mode == 0) {break;}
							if (pattern[(i+k)%8][j]) {
 1ce:	0f 2e       	mov	r0, r31
 1d0:	f4 e6       	ldi	r31, 0x64	; 100
 1d2:	cf 2e       	mov	r12, r31
 1d4:	d1 2c       	mov	r13, r1
 1d6:	f0 2d       	mov	r31, r0
 1d8:	32 c0       	rjmp	.+100    	; 0x23e <main+0x134>
 1da:	f8 01       	movw	r30, r16
 1dc:	81 91       	ld	r24, Z+
 1de:	8f 01       	movw	r16, r30
 1e0:	88 23       	and	r24, r24
 1e2:	21 f0       	breq	.+8      	; 0x1ec <main+0xe2>
								print(i,j);
 1e4:	6c 2f       	mov	r22, r28
 1e6:	8d 2f       	mov	r24, r29
 1e8:	0e 94 74 00 	call	0xe8	; 0xe8 <print>
 1ec:	cf 5f       	subi	r28, 0xFF	; 255
				if(mode == 0) {break;}
				for (int m = 0; m < 100; m++) {
					//if(mode == 0) {break;}
					for (int i = 0; i < 8; i++) {
						//if(mode == 0) {break;}
						for (int j = 0; j < 8; j++) {
 1ee:	c8 30       	cpi	r28, 0x08	; 8
 1f0:	a1 f7       	brne	.-24     	; 0x1da <main+0xd0>
 1f2:	ff ef       	ldi	r31, 0xFF	; 255
 1f4:	ef 1a       	sub	r14, r31
 1f6:	ff 0a       	sbc	r15, r31
 1f8:	df 5f       	subi	r29, 0xFF	; 255
		if(mode != 0) {
			for (int k = 0; k < 8; k++) {
				if(mode == 0) {break;}
				for (int m = 0; m < 100; m++) {
					//if(mode == 0) {break;}
					for (int i = 0; i < 8; i++) {
 1fa:	d8 30       	cpi	r29, 0x08	; 8
 1fc:	a9 f0       	breq	.+42     	; 0x228 <main+0x11e>
 1fe:	87 01       	movw	r16, r14
 200:	07 70       	andi	r16, 0x07	; 7
 202:	10 78       	andi	r17, 0x80	; 128
 204:	11 23       	and	r17, r17
 206:	34 f4       	brge	.+12     	; 0x214 <main+0x10a>
 208:	01 50       	subi	r16, 0x01	; 1
 20a:	11 09       	sbc	r17, r1
 20c:	08 6f       	ori	r16, 0xF8	; 248
 20e:	1f 6f       	ori	r17, 0xFF	; 255
 210:	0f 5f       	subi	r16, 0xFF	; 255
 212:	1f 4f       	sbci	r17, 0xFF	; 255
 214:	00 0f       	add	r16, r16
 216:	11 1f       	adc	r17, r17
 218:	00 0f       	add	r16, r16
 21a:	11 1f       	adc	r17, r17
 21c:	00 0f       	add	r16, r16
 21e:	11 1f       	adc	r17, r17
 220:	00 5a       	subi	r16, 0xA0	; 160
 222:	1f 4f       	sbci	r17, 0xFF	; 255
						//if(mode == 0) {break;}
						for (int j = 0; j < 8; j++) {
							//if(mode == 0) {break;}
							if (pattern[(i+k)%8][j]) {
 224:	c0 e0       	ldi	r28, 0x00	; 0
 226:	d9 cf       	rjmp	.-78     	; 0x1da <main+0xd0>
								print(i,j);
								//_delay_ms(1);
							}
						}
					}
					RowPort = 0;
 228:	18 ba       	out	0x18, r1	; 24
 22a:	83 ec       	ldi	r24, 0xC3	; 195
 22c:	99 e0       	ldi	r25, 0x09	; 9
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <main+0x124>
 232:	00 c0       	rjmp	.+0      	; 0x234 <main+0x12a>
 234:	00 00       	nop
 236:	91 e0       	ldi	r25, 0x01	; 1
 238:	c9 1a       	sub	r12, r25
 23a:	d1 08       	sbc	r13, r1
		}
		
		if(mode != 0) {
			for (int k = 0; k < 8; k++) {
				if(mode == 0) {break;}
				for (int m = 0; m < 100; m++) {
 23c:	19 f0       	breq	.+6      	; 0x244 <main+0x13a>
 23e:	75 01       	movw	r14, r10
					//if(mode == 0) {break;}
					for (int i = 0; i < 8; i++) {
						//if(mode == 0) {break;}
						for (int j = 0; j < 8; j++) {
							//if(mode == 0) {break;}
							if (pattern[(i+k)%8][j]) {
 240:	d0 e0       	ldi	r29, 0x00	; 0
 242:	dd cf       	rjmp	.-70     	; 0x1fe <main+0xf4>
			RowPort = 0;
			_delay_ms(1000);
		}
		
		if(mode != 0) {
			for (int k = 0; k < 8; k++) {
 244:	ef ef       	ldi	r30, 0xFF	; 255
 246:	ae 1a       	sub	r10, r30
 248:	be 0a       	sbc	r11, r30
 24a:	f8 e0       	ldi	r31, 0x08	; 8
 24c:	af 16       	cp	r10, r31
 24e:	b1 04       	cpc	r11, r1
 250:	09 f0       	breq	.+2      	; 0x254 <main+0x14a>
 252:	b6 cf       	rjmp	.-148    	; 0x1c0 <main+0xb6>
 254:	66 cf       	rjmp	.-308    	; 0x122 <main+0x18>

00000256 <_exit>:
 256:	f8 94       	cli

00000258 <__stop_program>:
 258:	ff cf       	rjmp	.-2      	; 0x258 <__stop_program>
